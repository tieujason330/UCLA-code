//
//  main.cpp
//  server
//
//  Created by I-Chun Liu on 11/22/14.
//  Copyright (c) 2014 I-Chun LIU. All rights reserved.
//

#include <stdio.h>
#include <sys/types.h>   // definitions of a number of data types used in socket.h and netinet/in.h
#include <sys/socket.h>  // definitions of structures needed for sockets, e.g. sockaddr
#include <netinet/in.h>  // constants and structures needed for internet domain addresses, e.g. sockaddr_in
#include <sys/time.h>
#include <stdlib.h>
#include <strings.h>
#include <sys/wait.h>	/* for the waitpid() system call */
#include <signal.h>	/* signal name macros, and the kill() prototype */
#include <unistd.h>
#include <sys/stat.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

#define BUFSIZE 1000

#define PACKETSIZE 1000
//This data size may change. I am not sure how big the header size is at this moment,
//but the size of data + the size of header should equal 1000, which is PACKETSIZE
#define DATASIZE 800

struct packet {
	int type; //0 - req, 1 - data, 2 - ACK, 3 - fIN
	int seq;  //pckt sequence num
	int size; //data size
	char data[PACKETSIZE];
};

int getFileSize(std::string fileName);
void readNProcessFile(char *fileName, int sockfd, packet p);

//this function prints out packet info and distinguishes between received or sent
void printPacket(struct packet p, int io) {
	if (io == 0) 
		std::cout << "RECV: Type " << p.type << " Seq " << p.seq << " Size " << p.size << std::endl;
	else
		std::cout << "SENT: Type " << p.type << " Seq " << p.seq << " Size " << p.size << std::endl;
}

//simulates loss and corruption
int simulateFault(double prob) {
	if( (double)rand() / (double)RAND_MAX < (double) prob) return 1;
	return 0;
}

int main(int argc, const char * argv[]) {
	int sockfd, portno;
	struct sockaddr_in serv_addr, cliaddr;
	socklen_t serv_addr_len, cli_addr_len;
	int byteRec;							//Number of bytes received from client
	char buffer[BUFSIZE];					//Buffer	
	double prob_loss, prob_corrupt;
	int window_size;	
	int total, current, seq_base; //GBN
	struct packet p_in, p_out;
	FILE *filePtr;
	//user should now do: ./server port window_size prob_loss prob_corrupt
	//Check user inputs
	if (argc < 5) {
		fprintf(stderr,"ERROR, no port provided\n");
		exit(1);
	}
	if (argc > 5) {
		fprintf(stderr, "ERROR, too many arguments. Only five arguments are allowed.\n");
		exit(1);
	}
	
	//Creating a socket
	sockfd = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockfd < 0) {
		perror("ERROR opening socket");
		exit(1);
	}
	//clear out serv_addr
	bzero((char *) &serv_addr, sizeof(serv_addr));
	portno = atoi(argv[1]);
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_addr.sin_port = htons(portno);
	
	//set window_size, prob_loss, prob_corrupt
	window_size = atoi(argv[2]);
	prob_loss = atoi(argv[3]);
	prob_corrupt = atoi(argv[4]);
	
	//make sure window_size is greater than 0
	if(window_size < 0) {
		perror("ERROR window size must be greater or equal to 1");
		exit(0);
	}
	//make sure loss/corrupt within 0.0 to 1.0
	if(prob_loss < 0.0 || prob_loss > 1.0 || prob_corrupt < 0.0 || prob_corrupt > 1.0) {
		perror("ERROR prob must be between 0.0 and 1.0");
		exit(0);
	}
	
	//Bind a socket to a local IP address and port number
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0){
		perror("ERROR on binding");
		exit(1);
	}
	
	listen(sockfd, 5);
	cli_addr_len = sizeof(cliaddr);
	//This variable will be used in "recvfrom" function call
	serv_addr_len = sizeof(serv_addr);

	fd_set readset;
	struct timeval timeout = {0,1}; //1 sec timeouts

	srand(time(NULL));

	//This part deals with receiving the message from the client that includes the name
	//of the file requested.
	while(1) {

		//waiting for file req
		std::cout << "Waiting for port #: " << portno << ".\n";
		if( recvfrom(sockfd, &p_in, sizeof(p_in), 0, (struct sockaddr *) &cliaddr, &cli_addr_len) < 0) {
			std::cout << "Packet lost.\n";
			continue;
		}
		printPacket(p_in, 0); 

		//open the file
		if(p_in.type != 0) {
			std::cout << "Not request packet.\n";
			continue;
		}

		//buffer = p_in.data;
		byteRec = recvfrom(sockfd, buffer, BUFSIZE, 0, (struct sockaddr *) &serv_addr, &serv_addr_len);
		buffer[byteRec] = 0;
		std::cout << "Number of bytes received(#bytes of the file name): " << byteRec << ".\n";
		std::cout << "Message is:" << buffer << ".\n";
		
		//Starts reading and processing the file
		readNProcessFile(buffer, sockfd, p_out);

		//calc required num of packets
		struct stat st;
		stat(buffer, &st);
		total = st.st_size / PACKETSIZE;
		if (st.st_size % PACKETSIZE > 0)
			total++;
		std::cout << "***Required number of pakets: " << total << ".***\n";

		//initialize GBN
		current = 0;
		seq_base = 0;

		//start GBN
		while(seq_base < total) {
			FD_ZERO(&readset);
			FD_SET(sockfd, &readset);
			if(select(sockfd+1, &readset, NULL, NULL, &timeout) < 0) {
				perror("Error on select\n");
				exit(0);
			}
			else if (FD_ISSET(sockfd, &readset)) {
				if (recvfrom(sockfd, &p_in, sizeof(p_in), 0, (struct sockaddr*) &cliaddr,
					&cli_addr_len) < 0) {
					std::cout << "Packet was lost.\n";
					current = 0; //sets current back to 0 because packet loss
					continue;
				}
				//must simulate loss/corruption
				if (simulateFault(prob_loss)) {
					std::cout << "Simluated loss " << p_in.seq << ".\n";
					current = 0;
					continue;
				}
				else if (simulateFault(prob_corrupt)) {
					std::cout << "Simulated corruption " << p_in.seq << ".\n";
					current = 0;
					continue;
				}

				printPacket(p_in, 0);

				//slide window forward
				if (p_in.type != 2)
					std::cout << "IGNORE " << p_in.seq << ": not ACK packet.\n";
				else if(p_in.seq >= seq_base) {
					seq_base = 1 + p_in.seq;
					std::cout << "Sliding window to " << seq_base << "/" << total << ".\n";
					current = 0;
				}
				else if(p_in.seq < seq_base || p_in.seq > seq_base + window_size) {
					std::cout << "IGNORE " << p_in.seq << ": unexpected ACK.\n";
				}
			}
			else {
				if(current >= window_size || current + seq_base >= total) {
					std::cout << "Timeout on " << seq_base << ".\n";
					current = 0;
				}
				else if (current + seq_base >= total) {
					continue;
				}

				bzero((char *) &p_out, sizeof(p_out));
				p_out.type = 1; //data pckt
				p_out.seq = seq_base + current;
				filePtr = fopen(buffer, "r");
				fseek(filePtr, p_out.seq * PACKETSIZE, SEEK_SET);
				p_out.size = fread(p_out.data, 1, PACKETSIZE, filePtr);
				fclose(filePtr);

				//send the next packet in the window
				if(sendto(sockfd, &p_out, sizeof(p_out), 0, (struct sockaddr*)&cliaddr,
					cli_addr_len) < 0) {
					perror("ERROR sending packet out.\n");
					exit(0);
				}
				
				printPacket(p_out, 1);
				current++;
				
			}			
		}
		std::cout << "All packets have been sent and acknowledged.\n";

		//send FIN pckt
		bzero((char *)&p_out, sizeof(p_out));
		p_out.type = 3; //FIN
		p_out.seq = seq_base;
		p_out.size = 0;
		if(sendto(sockfd, &p_out, sizeof(&p_out), 0, (struct sockaddr*) &cliaddr, cli_addr_len) < 0){
			perror("ERROR sending FIN packet.\n");
			exit(0);
		}
		printPacket(p_out,1);

		//resend FIN packet if necessary, wait for it first
		while(1) {
			FD_ZERO(&readset);
			FD_SET(sockfd, &readset);	
			if(select(sockfd+1, &readset, NULL, NULL, &timeout) < 0) {
				perror("ERROR on select.\n");
				exit(0);
			}
			else if(FD_ISSET(sockfd, &readset)) {
				if(recvfrom(sockfd, &p_in, sizeof(p_in), 0, (struct sockaddr*) &cliaddr,
					&cli_addr_len) < 0) {
					std::cout << "Packet lost.\n";
					continue;
				}
				printPacket(p_in, 0);

				if(p_in.seq == p_out.seq && p_in.type == 3) break;
			}
			else {
				if(sendto(sockfd, &p_out, sizeof(p_out), 0, (struct sockaddr*) &cliaddr,
					cli_addr_len) < 0) {
					perror("ERROR sending FIN.\n");
					exit(0);
				}
				printPacket(p_out, 1);
			}
		}
	
	}
	/*
	//This part deals with receiving the message from the client that includes the name
	//of the file requested.
	std::cout << "Waiting for port #: " << portno << ".\n";
	byteRec = recvfrom(sockfd, buffer, BUFSIZE, 0, (struct sockaddr *) &serv_addr, &serv_addr_len);
	buffer[byteRec] = 0;
	std::cout << "Number of bytes received(#bytes of the file name): " << byteRec << ".\n";
	std::cout << "Message is:" << buffer << ".\n";
		
	//Starts reading and processing the file
	readNProcessFile(buffer, sockfd);
	*/
	
	
	
    return 0;
}

/**
 * This function first checks if the file exists in server's directory. If it isn't, the program
 * will stop. If it is, it calls getFileSize to get the file size and divides the data into
 * multiple packets.
 * Added third argument, p_out sends FIN packet for a file that doesn't exist
 */
void readNProcessFile(char *fileName, int sockfd, packet& p_out){
	//std::string data;
	FILE *filePtr;
	char buffer[DATASIZE + 1]; //Buffer for fread
	std::vector<std::string> vectorS; //Vector for storing chunks of data
	struct sockaddr_in cliaddr;
	socklen_t cli_addr_len = sizeof(cliaddr);
	//Opening the file
	filePtr = fopen(fileName, "r");

	//if file is null, send abort FIN signal
	if(filePtr == NULL) {
		perror("ERROR");
		printf("Sending abort FIN signal\n");
		bzero((char *) &p_out, sizeof(p_out));
		p_out.type = 3; //FIN pcket
		p_out.seq = 0;
		p_out.size = 0;
		if(sendto(sockfd, &p_out, sizeof(p_out), 0, (struct sockaddr*) &cliaddr, cli_addr_len) < 0) {
			perror("ERROR sending abort FIN\n");
			exit(0);
		}
		printPacket(p_out, 1);
		return;
	}
	fseek(filePtr, 0, SEEK_SET);
	fread(buffer, DATASIZE, 1, filePtr);
	buffer[DATASIZE] = '\0';
	
	//Creating a string version of buffer
	std::string bufferS(buffer);
	vectorS.push_back(bufferS);
	
	//Get file size
	std::string fNConvert(fileName);
	int fileSize = getFileSize(fNConvert);
	
	//Compute bytes left
	int bytesLeft = fileSize - DATASIZE;
	//Use to indicate whether or not it's the first iteration of while loop
	int flag = 1;
	
	//Divide chunks of data and store them inside the vector
	while(bytesLeft - DATASIZE > 0){
		//Only want to execute bytesLeft -= DATASIZE after the
		//first iteration of this while loop
		if(flag == 1){
			flag = 0;
		}
		else{
			bytesLeft -= DATASIZE;
		}
		//Write smaller chunk of data. Size is less than DATASIZE.
		if(bytesLeft < DATASIZE){
			char bufferSmall[bytesLeft + 1];
			fread(bufferSmall, bytesLeft, 1, filePtr);
			bufferSmall[bytesLeft] = '\0';
			std::string bufferS2(bufferSmall);
			vectorS.push_back(bufferS2);
			//The statement below is for debugging.
			//std::cout << bufferS2;
		}
		else{
			//Write DATASIZE chunk of data.
			fread(buffer, DATASIZE, 1, filePtr);
			buffer[DATASIZE] = '\0';
			std::string bufferS2(buffer);
			vectorS.push_back(bufferS2);
			//The statement below is for debugging.
			//std::cout << bufferS2;
		}
	}
	
	//Print all the strings in vectorS to standard output
	for(std::vector<std::string>::const_iterator i = vectorS.begin(); i != vectorS.end(); ++i){
		std::cout << *i;
	}
	
	fclose(filePtr);
}

/**
 * This function calculates and returns the file size.
 * @param fileName - This is the name of the file that we're working on.
 * @return file size
 */
int getFileSize(std::string fileName){
	std::streampos start;
	std::streampos end;
	std::ifstream file(fileName.c_str(), std::ios::binary);
	start = file.tellg();
	file.seekg(0, std::ios::end);
	end = file.tellg();
	file.close();
	return end - start;
}
