1.
Write a function clone of type 'a * int -> 'a list. 
The function takes an item e and a nonnegative integer n and returns a list containing n copies of e. 
For example, clone("hi", 4) returns ["hi"; "hi"; "hi"; "hi"].

let rec clone ((e, n) : 'a * int) : 'a list =
	match n with
    	0 -> []
       | _ -> e::clone(e, n - 1)
-------------------------------------------------------------------------------------------------
2.
Write a function rev that reverses the elements in a list.

Examples:
# rev [1;2;3];;
- : int list = [3; 2; 1]
# rev ['z'];;
- : char list = ['z']

let rec rev (l: 'a list) : 'a list =
	let rec revHelper rlist list =
    	match list with
        	[] -> rlist
          | first::rest -> revHelper (first::rlist) rest 
    in
    revHelper [] l
-------------------------------------------------------------------------------------------------
3.
The naive algorithm for reversing a list takes time that is quadratic in the size of the argument list. 
In this problem, you will implement a more efficient algorithm for reversing a list: 
your solution should only take linear time. Call this function fastRev. 
The key to fastRev is that it builds the reversed list as we recurse over the input list,
 rather than as we return from each recursive call. This is similar to how an iterative version of list reversal,
 as implemented in a language like C, would naturally work.

To get the right behavior, your fastRev function should use a local helper function 
revHelper to do most of the work. The helper function should take two arguments: 
(1) the suffix of the input list that remains to be reversed; 
(2) the reversal of the first part of the input list. The helper function should return the complete reversed list.
 Therefore the reversal of an input list l can be performed via the invocation revHelper(l, []). 
I've already provided this setup for you, so all you have to do is provide the implementation of revHelper
 (which is defined as a nested function within fastRev) and invoke it as listed above. 
The call (fastRev (clone(0, 10000))) should be noticeably faster than (rev (clone(0, 10000))).

let fastRev (l : 'a list) : 'a list =
    let rec revHelper (remain, sofar) =
    	match remain with
        	[] -> sofar
          | first::rest -> revHelper(rest, first::sofar)
	in revHelper(l, [])
-------------------------------------------------------------------------------------------------
4.
Write a function tails of type 'a list -> 'a list list that takes a list and returns a 
list of lists containing the original list along with all tails of the list, from longest to shortest.
 For example, tails [1;2;3] is [[1;2;3];[2;3];[3];[]].

let rec tails (l : 'a list) : 'a list list =
	match l with
    	[] -> [ [] ]
       | [_] -> [l;[]]
       | first::rest -> [l]@tails(rest)
-------------------------------------------------------------------------------------------------
5.
Write a function to return the second-to-last element of a list. 
To deal with the case when the list has fewer than two elements, the 
function should return a value of the built-in option type, defined as follows:

type 'a option = None | Some of 'a 

Examples:
# penultimate [1;2;3];;
- : int option = Some 2
# penultimate ["a"];;
- : string option = None


let rec penultimate (l: 'a list) : 'a option =
	match l with
      | [] -> None
	  |	[_] -> None
      | first::second::rest when rest = [] -> Some first
      | first::second::rest -> if(penultimate(rest) = None) then Some second
                               else penultimate(rest)
-------------------------------------------------------------------------------------------------
6.
Flatten a list of lists.

Examples:
# flatten [[2]];;
- : int list = [2]
# flatten [[2]; []; [3;2]];;
- : int list = [2; 3; 2]

let rec flatten (l: 'a list list) : 'a list =
	match l with
    	[] -> []
       | first::rest -> first@(flatten(rest))
-------------------------------------------------------------------------------------------------
7.
Convert a list of digits (assumed to be numbers between 0 and 9) into an integer. 
You may assume that the first element of the list is not 0.

Examples:
# intOfDigits []
- : int = 0
# intOfDigits [3;1;0;2]
- : int = 3102

let rec intOfDigits (l: int list) : int =
	let rec intOfDigitsHelper l n = 
    	match l with
        	[] -> n
          | first::rest -> intOfDigitsHelper rest (10*n + first)
    in
    intOfDigitsHelper l 0
-------------------------------------------------------------------------------------------------
8.
Merge two sorted lists of integers into a single sorted list. You may assume that the given lists 
are both sorted already. Don't define any helper functions.

Example:
# merge ([1;3;5], [2;4])
- : int list = [1;2;3;4;5]

let rec merge ((l1, l2): int list * int list) : int list = 
	match (l1,l2) with
    	[],_ -> l2
      | _,[] -> l1
      | h1::t1, h2::t2 -> if h1 < h2 then h1::(merge(t1, l2))
                          else h2::(merge(l1, t2))
-------------------------------------------------------------------------------------------------
9.
Implement the so-called run-length encoding data compression method. 
Consecutive duplicates of elements are encoded as lists (N, E) 
where N is the number of duplicates of the element E. Don't define any helper 
functions.

Examples:
# encode [];;
- : (int * 'a) list = []
# encode ["a"];;
- : (int * string) list = [(1, "a")]
# encode ["a";"a"];;
- : (int * string) list = [(2, "a")]
# encode ["a";"b";"b"];;
- : (int * string) list = [(1, "a"); (2, "b")]
# encode ["a";"b";"b";"a";"a"];; 
- : (int * string) list = [(1, "a"); (2, "b"); (2, "a")]

let rec encode (l: 'a list) : (int * 'a) list =
	match l with
    	[] -> []
      | [first] -> [(1,first)]
      | first::rest -> 
        let (n,e)::r = encode(rest)
        in
        if first = e then (n+1,e)::r
        else (1,first)::(n,e)::r

-------------------------------------------------------------------------------------------------
10.
Rotate a list n places (i.e., take n elements off the front and move them to the back). 
You may assume n is between 0 and the length of the list, inclusively. Do not define any helper functions.

Examples:
# rotate ([1;2;3;4], 3);;
- : int list = [4; 1; 2; 3]
# rotate ([1;2;3;4;5;6;7;8], 2);;
- : int list = [3; 4; 5; 6; 7; 8; 1; 2]


let rec rotate ((l, n) : 'a list * int) : 'a list = 
	match (l,n) with
    	_, 0 -> l
       | [_], _ -> l
       | (first::rest), _ -> rotate(rest@[first], n-1)
-------------------------------------------------------------------------------------------------
11.
Convert a (decimal) integer into binary by encoding it as a list of integers. 
You may use the builtin modulo operator mod : int * int -> int. Don't define any helper functions.

Examples:
# dec2bin 0;;
- : int list = [0]
# dec2bin 1;;
- : int list = [1]
# dec2bin 2;;
- : int list = [1; 0]
# dec2bin 3;;
- : int list = [1; 1]
# dec2bin 4;;
- : int list = [1; 0; 0]
# dec2bin 15;;
- : int list = [1; 1; 1; 1]

let rec dec2bin (n: int) : int list = 
	match n with
    	0 -> [0]
       | 1 -> [1]
       | _ -> (dec2bin (n/2))@[n mod 2]
-------------------------------------------------------------------------------------------------
12.
Write a function pairify of type 'a list -> ('a * 'a) list that takes a list and pairs up consecutive 
elements of the list. If the list has an odd length, then the last element should be dropped from the result. 
Do not define any helper functions.

Examples:

# pairify [1;2;3;4];;
- : (int * int) list = [(1, 2); (3, 4)]
# pairify [1;2;3;4;5];;
- : (int * int) list = [(1, 2); (3, 4)]

let rec pairify (l : 'a list) : ('a * 'a) list =
	match l with
     | []-> []
     | [_] -> []
     | first::second::rest -> (first,second)::pairify(rest)